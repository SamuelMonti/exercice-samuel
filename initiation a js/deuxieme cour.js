// Cours d'initiation √† JavaScript - Niveau 2

// Bravo Samuel ! üéâ Maintenant que tu connais les bases de JavaScript,
// nous allons approfondir un peu plus avec des concepts importants.

// 1. Les op√©rateurs logiques et de comparaison
// Les op√©rateurs sont des symboles qui permettent d'effectuer des op√©rations sur des valeurs.
// Il existe plusieurs types d'op√©rateurs : arithm√©tiques, de comparaison et logiques.

let a = 10; // D√©claration d'une variable a avec la valeur 10
let b = 5; // D√©claration d'une variable b avec la valeur 5

// Op√©rateurs de comparaison (ils retournent toujours un bool√©en : true ou false)
console.log(a > b); // V√©rifie si a est plus grand que b (true)
console.log(a < b); // V√©rifie si a est plus petit que b (false)
console.log(a == 10); // V√©rifie si a est √©gal √† 10 en valeur (true)
console.log(a === "10"); // V√©rifie si a est strictement √©gal √† "10" (false, car types diff√©rents)
console.log(a !== b); // V√©rifie si a est diff√©rent de b (true)

// Op√©rateurs logiques (ils permettent de combiner des conditions)
console.log(true && false); // L'op√©rateur ET (&&) retourne true seulement si les deux conditions sont vraies (ici false)
console.log(true || false); // L'op√©rateur OU (||) retourne true si au moins une condition est vraie (ici true)
console.log(!true); // L'op√©rateur NON (!) inverse la valeur (ici false)

// 2. Les structures de contr√¥le avanc√©es
// Elles permettent d'ex√©cuter du code sous certaines conditions

let age = 20; // D√©claration d'une variable age avec la valeur 20
if (age >= 18 && age < 60) { // V√©rifie si l'√¢ge est entre 18 et 59
    console.log("Vous √™tes un adulte actif.");
} else if (age >= 60) { // V√©rifie si l'√¢ge est 60 ou plus
    console.log("Vous √™tes senior.");
} else { // Si aucune des conditions pr√©c√©dentes n'est remplie
    console.log("Vous √™tes mineur.");
}

// 3. Les fonctions avanc√©es
// Une fonction est un bloc de code r√©utilisable qui effectue une action pr√©cise

function multiplier(x, y) { // Fonction qui prend deux param√®tres x et y
    return x * y; // Retourne le produit de x et y
}
console.log("5 * 3 =", multiplier(5, 3)); // Appelle la fonction et affiche le r√©sultat

// Fonction fl√©ch√©e avec un seul param√®tre
const carre = n => n * n; // Fonction qui retourne le carr√© d'un nombre
console.log("Le carr√© de 4 est", carre(4));

// 4. Les tableaux (arrays) - Manipulation avanc√©e
// Un tableau est une liste ordonn√©e d'√©l√©ments

let fruits = ["Pomme", "Banane", "Cerise"]; // Tableau contenant trois fruits
console.log("Premier fruit :", fruits[0]); // Affiche le premier √©l√©ment du tableau
fruits.push("Orange"); // Ajoute "Orange" √† la fin du tableau
fruits.pop(); // Supprime le dernier √©l√©ment du tableau
console.log("Liste des fruits :", fruits); // Affiche la liste mise √† jour

// Parcourir un tableau avec une boucle for
for (let i = 0; i < fruits.length; i++) { // Boucle qui parcourt le tableau
    console.log("Fruit num√©ro", i + 1, ":", fruits[i]);
}

// 5. Les objets - Stocker des informations li√©es
// Un objet est une structure qui regroupe plusieurs informations sous un m√™me nom

let utilisateur = {
    nom: "Samuel", // Propri√©t√© nom
    age: 25, // Propri√©t√© √¢ge
    pays: "France", // Propri√©t√© pays
    afficherInfo: function() { // M√©thode qui retourne une cha√Æne format√©e avec les infos de l'utilisateur
        return `Nom: ${this.nom}, Age: ${this.age}, Pays: ${this.pays}`;
    }
};
console.log(utilisateur.afficherInfo()); // Affiche les informations de l'utilisateur

// 6. Les boucles avanc√©es
// Une boucle for...of pour parcourir un tableau
for (let fruit of fruits) { // Parcourt chaque √©l√©ment du tableau fruits
    console.log("Fruit :", fruit);
}

// Une boucle for...in pour parcourir un objet
for (let cle in utilisateur) { // Parcourt chaque propri√©t√© de l'objet utilisateur
    console.log(`${cle} : ${utilisateur[cle]}`);
}

// 7. Introduction aux fonctions asynchrones avec setTimeout
// setTimeout permet d'ex√©cuter une fonction apr√®s un certain d√©lai
console.log("D√©but du programme");
setTimeout(() => { // Ex√©cute le code apr√®s 2 secondes
    console.log("Ce message s'affiche apr√®s 2 secondes");
}, 2000);
console.log("Fin du programme");

// F√©licitations Samuel ! Tu viens de finir le deuxi√®me cours sur JavaScript.
// Continue √† pratiquer et on passe au prochain niveau bient√¥t ! üöÄ